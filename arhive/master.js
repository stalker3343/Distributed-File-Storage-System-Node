const fs = require("fs");
const zmq = require("zeromq");

// –°–æ–∑–¥–∞–µ–º —Å–æ–∫–µ—Ç –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö
const socket = zmq.socket("pull");
// socket.bindSync(`tcp://${listenIP}:${listenPort}`);
socket.connect("tcp://localhost:5558");
let chankCount = 0;
// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª
function receiveFile() {
  let totalBytes = 0;
  const chunks = [];

  socket.on("message", (chunk) => {
    chunks.push(chunk);
    totalBytes += chunk.length;
    console.log(`Received ${chunk.length} bytes`);
    console.log("üöÄ ~ socket.on ~ totalBytes:", totalBytes);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ª—É—á–µ–Ω—ã –ª–∏ –≤—Å–µ —á–∞–Ω–∫–∏
    // if (totalBytes === expectedFileSize) {
    const filePath = `chank.${chankCount}.txt`; // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è —Ñ–∞–π–ª–∞
    chankCount++;
    const buffer = Buffer.concat(chunks); // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ –≤ –æ–¥–∏–Ω –±—É—Ñ–µ—Ä
    fs.writeFile(filePath, chunk, (err) => {
      if (err) {
        console.error("Error writing file:", err);
      } else {
        console.log(`File saved as ${filePath}`);
        // –ü–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ —Å–Ω–æ–≤–∞ –æ–∂–∏–¥–∞–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª
        receiveFile();
      }
    });
    // }
  });
}

// –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
const expectedFileSize = parseInt(process.argv[2]);
const fileExtension = process.argv[3];

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–µ—Ä–µ–¥–∞–Ω—ã –ª–∏ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –∏ –µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
if (!expectedFileSize || !fileExtension) {
  console.error("Usage: node client.js <file_size> <file_extension>");
  process.exit(1);
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö
receiveFile();
